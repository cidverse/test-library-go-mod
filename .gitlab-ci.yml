# cid-workflow-version: 0.5.0

# This file is generated by the CID Workflow GitLab App.
# DO NOT EDIT!

# global defaults
default:
  image: quay.io/podman/stable@sha256:642704dd0bcd909b722a06e0dbe199bc74163047886c3d5c869fe2c0d8e3d4d5 # v5.4.2-immutable
  before_script:
    - curl -L -o /usr/local/bin/cid https://github.com/cidverse/cid/releases/download/v0.5.0/linux_amd64
    - chmod +x /usr/local/bin/cid
    - cid version
    - cid catalog update
    - cid catalog list
    - cid executables update

# variables
variables:
  # git settings
  GIT_STRATEGY: clone
  GIT_DEPTH: 10

# stages
stages:
    - build
    - test
    - scan
    - publish

# configuration snippets
.default-job: &default_job
  tags:
    - saas-linux-small-amd64
  allow_failure: false
  interruptible: true
  retry:
    max: 2
    when:
      - runner_system_failure
      - api_failure
      - scheduler_failure

# Nightly
## go-build [github.com/cidverse/test-library-go-mod]
"nightly/go-build [github.com/cidverse/test-library-go-mod]":
    <<: *default_job
    stage: build
    needs: []
    dependencies: []
    timeout: 10m
    rules:
      - if: '$CI_PIPELINE_SOURCE == "schedule" && $CI_PIPELINE_SCHEDULE_DESCRIPTION == "nightly"'
        when: always
      - when: never
    script:
        - cid --log-level=${CID_LOGLEVEL:-info} plan execute --state-file ".cid/state-gitlab.json" --state-wf-name "nightly" --step "go-build-github-com-cidverse-test-library-go-mod"
    artifacts:
      name: "nightly/go-build [github.com/cidverse/test-library-go-mod]"
      paths:
        - .dist/go-build-github-com-cidverse-test-library-go-mod/
      expire_in: 1 day
## go-test [github.com/cidverse/test-library-go-mod]
"nightly/go-test [github.com/cidverse/test-library-go-mod]":
    <<: *default_job
    stage: test
    needs: []
    dependencies: []
    timeout: 10m
    rules:
      - if: '$CI_PIPELINE_SOURCE == "schedule" && $CI_PIPELINE_SCHEDULE_DESCRIPTION == "nightly"'
        when: always
      - when: never
    script:
        - cid --log-level=${CID_LOGLEVEL:-info} plan execute --state-file ".cid/state-gitlab.json" --state-wf-name "nightly" --step "go-test-github-com-cidverse-test-library-go-mod"
    coverage: /Test-Coverage:(\d+\.\d+)%/ # used for percentage
    artifacts:
      name: "nightly/go-test [github.com/cidverse/test-library-go-mod]"
      paths:
        - .dist/go-test-github-com-cidverse-test-library-go-mod/
      expire_in: 1 day
      reports:
        junit: .dist/go-test-github-com-cidverse-test-library-go-mod/report/junit/*.xml
        coverage_report: # used for visualization only
          coverage_format: cobertura
          path: .dist/go-test-github-com-cidverse-test-library-go-mod/report/cobertura/*.xml
## gitleaks-scan
"nightly/gitleaks-scan":
    <<: *default_job
    stage: scan
    needs: []
    dependencies: []
    timeout: 10m
    rules:
      - if: '$CI_PIPELINE_SOURCE == "schedule" && $CI_PIPELINE_SCHEDULE_DESCRIPTION == "nightly"'
        when: always
      - when: never
    script:
        - cid --log-level=${CID_LOGLEVEL:-info} plan execute --state-file ".cid/state-gitlab.json" --state-wf-name "nightly" --step "gitleaks-scan"
    artifacts:
      name: "nightly/gitleaks-scan"
      paths:
        - .dist/gitleaks-scan/
      expire_in: 1 day
      reports:
        codequality: .dist/gitleaks-scan/report/gl-codequality/*.json
## semgrep-scan
"nightly/semgrep-scan":
    <<: *default_job
    stage: scan
    needs: []
    dependencies: []
    timeout: 10m
    rules:
      - if: '$CI_PIPELINE_SOURCE == "schedule" && $CI_PIPELINE_SCHEDULE_DESCRIPTION == "nightly"'
        when: always
      - when: never
    script:
        - cid --log-level=${CID_LOGLEVEL:-info} plan execute --state-file ".cid/state-gitlab.json" --state-wf-name "nightly" --step "semgrep-scan"
    artifacts:
      name: "nightly/semgrep-scan"
      paths:
        - .dist/semgrep-scan/
      expire_in: 1 day
      reports:
        codequality: .dist/semgrep-scan/report/gl-codequality/*.json
## trivyfs-scan
"nightly/trivyfs-scan":
    <<: *default_job
    stage: scan
    needs: []
    dependencies: []
    timeout: 10m
    rules:
      - if: '$CI_PIPELINE_SOURCE == "schedule" && $CI_PIPELINE_SCHEDULE_DESCRIPTION == "nightly"'
        when: always
      - when: never
    script:
        - cid --log-level=${CID_LOGLEVEL:-info} plan execute --state-file ".cid/state-gitlab.json" --state-wf-name "nightly" --step "trivyfs-scan"
    artifacts:
      name: "nightly/trivyfs-scan"
      paths:
        - .dist/trivyfs-scan/
      expire_in: 1 day
      reports:
        codequality: .dist/trivyfs-scan/report/gl-codequality/*.json
## zizmor-scan
"nightly/zizmor-scan":
    <<: *default_job
    stage: scan
    needs: []
    dependencies: []
    timeout: 10m
    rules:
      - if: '$CI_PIPELINE_SOURCE == "schedule" && $CI_PIPELINE_SCHEDULE_DESCRIPTION == "nightly"'
        when: always
      - when: never
    script:
        - cid --log-level=${CID_LOGLEVEL:-info} plan execute --state-file ".cid/state-gitlab.json" --state-wf-name "nightly" --step "zizmor-scan"
    artifacts:
      name: "nightly/zizmor-scan"
      paths:
        - .dist/zizmor-scan/
      expire_in: 1 day

# Pull Request
## go-build [github.com/cidverse/test-library-go-mod]
"pull-request/go-build [github.com/cidverse/test-library-go-mod]":
    <<: *default_job
    stage: build
    needs: []
    dependencies: []
    timeout: 10m
    rules:
      - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
        when: always
      - when: never
    script:
        - cid --log-level=${CID_LOGLEVEL:-info} plan execute --state-file ".cid/state-gitlab.json" --state-wf-name "pull-request" --step "go-build-github-com-cidverse-test-library-go-mod"
    artifacts:
      name: "pull-request/go-build [github.com/cidverse/test-library-go-mod]"
      paths:
        - .dist/go-build-github-com-cidverse-test-library-go-mod/
      expire_in: 1 day
## go-test [github.com/cidverse/test-library-go-mod]
"pull-request/go-test [github.com/cidverse/test-library-go-mod]":
    <<: *default_job
    stage: test
    needs: []
    dependencies: []
    timeout: 10m
    rules:
      - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
        when: always
      - when: never
    script:
        - cid --log-level=${CID_LOGLEVEL:-info} plan execute --state-file ".cid/state-gitlab.json" --state-wf-name "pull-request" --step "go-test-github-com-cidverse-test-library-go-mod"
    coverage: /Test-Coverage:(\d+\.\d+)%/ # used for percentage
    artifacts:
      name: "pull-request/go-test [github.com/cidverse/test-library-go-mod]"
      paths:
        - .dist/go-test-github-com-cidverse-test-library-go-mod/
      expire_in: 1 day
      reports:
        junit: .dist/go-test-github-com-cidverse-test-library-go-mod/report/junit/*.xml
        coverage_report: # used for visualization only
          coverage_format: cobertura
          path: .dist/go-test-github-com-cidverse-test-library-go-mod/report/cobertura/*.xml
## gitleaks-scan
"pull-request/gitleaks-scan":
    <<: *default_job
    stage: scan
    needs: []
    dependencies: []
    timeout: 10m
    rules:
      - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
        when: always
      - when: never
    script:
        - cid --log-level=${CID_LOGLEVEL:-info} plan execute --state-file ".cid/state-gitlab.json" --state-wf-name "pull-request" --step "gitleaks-scan"
    artifacts:
      name: "pull-request/gitleaks-scan"
      paths:
        - .dist/gitleaks-scan/
      expire_in: 1 day
      reports:
        codequality: .dist/gitleaks-scan/report/gl-codequality/*.json
## semgrep-scan
"pull-request/semgrep-scan":
    <<: *default_job
    stage: scan
    needs: []
    dependencies: []
    timeout: 10m
    rules:
      - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
        when: always
      - when: never
    script:
        - cid --log-level=${CID_LOGLEVEL:-info} plan execute --state-file ".cid/state-gitlab.json" --state-wf-name "pull-request" --step "semgrep-scan"
    artifacts:
      name: "pull-request/semgrep-scan"
      paths:
        - .dist/semgrep-scan/
      expire_in: 1 day
      reports:
        codequality: .dist/semgrep-scan/report/gl-codequality/*.json
## trivyfs-scan
"pull-request/trivyfs-scan":
    <<: *default_job
    stage: scan
    needs: []
    dependencies: []
    timeout: 10m
    rules:
      - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
        when: always
      - when: never
    script:
        - cid --log-level=${CID_LOGLEVEL:-info} plan execute --state-file ".cid/state-gitlab.json" --state-wf-name "pull-request" --step "trivyfs-scan"
    artifacts:
      name: "pull-request/trivyfs-scan"
      paths:
        - .dist/trivyfs-scan/
      expire_in: 1 day
      reports:
        codequality: .dist/trivyfs-scan/report/gl-codequality/*.json
## zizmor-scan
"pull-request/zizmor-scan":
    <<: *default_job
    stage: scan
    needs: []
    dependencies: []
    timeout: 10m
    rules:
      - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
        when: always
      - when: never
    script:
        - cid --log-level=${CID_LOGLEVEL:-info} plan execute --state-file ".cid/state-gitlab.json" --state-wf-name "pull-request" --step "zizmor-scan"
    artifacts:
      name: "pull-request/zizmor-scan"
      paths:
        - .dist/zizmor-scan/
      expire_in: 1 day

# Release
## go-build [github.com/cidverse/test-library-go-mod]
"release/go-build [github.com/cidverse/test-library-go-mod]":
    <<: *default_job
    stage: build
    needs: []
    dependencies: []
    timeout: 10m
    rules:
      - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_TAG =~ /^v[0-9]+.[0-9]+.[0-9]+$/'
        when: always
      - when: never
    script:
        - cid --log-level=${CID_LOGLEVEL:-info} plan execute --state-file ".cid/state-gitlab.json" --state-wf-name "release" --step "go-build-github-com-cidverse-test-library-go-mod"
    artifacts:
      name: "release/go-build [github.com/cidverse/test-library-go-mod]"
      paths:
        - .dist/go-build-github-com-cidverse-test-library-go-mod/
      expire_in: 1 day
## go-test [github.com/cidverse/test-library-go-mod]
"release/go-test [github.com/cidverse/test-library-go-mod]":
    <<: *default_job
    stage: test
    needs: []
    dependencies: []
    timeout: 10m
    rules:
      - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_TAG =~ /^v[0-9]+.[0-9]+.[0-9]+$/'
        when: always
      - when: never
    script:
        - cid --log-level=${CID_LOGLEVEL:-info} plan execute --state-file ".cid/state-gitlab.json" --state-wf-name "release" --step "go-test-github-com-cidverse-test-library-go-mod"
    coverage: /Test-Coverage:(\d+\.\d+)%/ # used for percentage
    artifacts:
      name: "release/go-test [github.com/cidverse/test-library-go-mod]"
      paths:
        - .dist/go-test-github-com-cidverse-test-library-go-mod/
      expire_in: 1 day
      reports:
        junit: .dist/go-test-github-com-cidverse-test-library-go-mod/report/junit/*.xml
        coverage_report: # used for visualization only
          coverage_format: cobertura
          path: .dist/go-test-github-com-cidverse-test-library-go-mod/report/cobertura/*.xml
## gitleaks-scan
"release/gitleaks-scan":
    <<: *default_job
    stage: scan
    needs: []
    dependencies: []
    timeout: 10m
    rules:
      - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_TAG =~ /^v[0-9]+.[0-9]+.[0-9]+$/'
        when: always
      - when: never
    script:
        - cid --log-level=${CID_LOGLEVEL:-info} plan execute --state-file ".cid/state-gitlab.json" --state-wf-name "release" --step "gitleaks-scan"
    artifacts:
      name: "release/gitleaks-scan"
      paths:
        - .dist/gitleaks-scan/
      expire_in: 1 day
      reports:
        codequality: .dist/gitleaks-scan/report/gl-codequality/*.json
## semgrep-scan
"release/semgrep-scan":
    <<: *default_job
    stage: scan
    needs: []
    dependencies: []
    timeout: 10m
    rules:
      - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_TAG =~ /^v[0-9]+.[0-9]+.[0-9]+$/'
        when: always
      - when: never
    script:
        - cid --log-level=${CID_LOGLEVEL:-info} plan execute --state-file ".cid/state-gitlab.json" --state-wf-name "release" --step "semgrep-scan"
    artifacts:
      name: "release/semgrep-scan"
      paths:
        - .dist/semgrep-scan/
      expire_in: 1 day
      reports:
        codequality: .dist/semgrep-scan/report/gl-codequality/*.json
## trivyfs-scan
"release/trivyfs-scan":
    <<: *default_job
    stage: scan
    needs: []
    dependencies: []
    timeout: 10m
    rules:
      - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_TAG =~ /^v[0-9]+.[0-9]+.[0-9]+$/'
        when: always
      - when: never
    script:
        - cid --log-level=${CID_LOGLEVEL:-info} plan execute --state-file ".cid/state-gitlab.json" --state-wf-name "release" --step "trivyfs-scan"
    artifacts:
      name: "release/trivyfs-scan"
      paths:
        - .dist/trivyfs-scan/
      expire_in: 1 day
      reports:
        codequality: .dist/trivyfs-scan/report/gl-codequality/*.json
## zizmor-scan
"release/zizmor-scan":
    <<: *default_job
    stage: scan
    needs: []
    dependencies: []
    timeout: 10m
    rules:
      - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_TAG =~ /^v[0-9]+.[0-9]+.[0-9]+$/'
        when: always
      - when: never
    script:
        - cid --log-level=${CID_LOGLEVEL:-info} plan execute --state-file ".cid/state-gitlab.json" --state-wf-name "release" --step "zizmor-scan"
    artifacts:
      name: "release/zizmor-scan"
      paths:
        - .dist/zizmor-scan/
      expire_in: 1 day
## changelog-generate
"release/changelog-generate":
    <<: *default_job
    stage: publish
    needs: ["release/gitleaks-scan", "release/go-build [github.com/cidverse/test-library-go-mod]", "release/go-test [github.com/cidverse/test-library-go-mod]", "release/semgrep-scan", "release/trivyfs-scan", "release/zizmor-scan"]
    dependencies: []
    timeout: 10m
    rules:
      - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_TAG =~ /^v[0-9]+.[0-9]+.[0-9]+$/'
        when: always
      - when: never
    script:
        - cid --log-level=${CID_LOGLEVEL:-info} plan execute --state-file ".cid/state-gitlab.json" --state-wf-name "release" --step "changelog-generate"
    artifacts:
      name: "release/changelog-generate"
      paths:
        - .dist/changelog-generate/
      expire_in: 1 day
## gitlab-release-publish
"release/gitlab-release-publish":
    <<: *default_job
    stage: publish
    needs: ["release/changelog-generate", "release/gitleaks-scan", "release/go-build [github.com/cidverse/test-library-go-mod]", "release/go-test [github.com/cidverse/test-library-go-mod]", "release/semgrep-scan", "release/trivyfs-scan", "release/zizmor-scan"]
    dependencies: ["release/changelog-generate", "release/go-build [github.com/cidverse/test-library-go-mod]"]
    timeout: 10m
    rules:
      - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_TAG =~ /^v[0-9]+.[0-9]+.[0-9]+$/'
        when: always
      - when: never
    script:
        - cid --log-level=${CID_LOGLEVEL:-info} plan execute --state-file ".cid/state-gitlab.json" --state-wf-name "release" --step "gitlab-release-publish"
    artifacts:
      name: "release/gitlab-release-publish"
      paths:
        - .dist/gitlab-release-publish/
      expire_in: 1 day

# Main
## go-build [github.com/cidverse/test-library-go-mod]
"main/go-build [github.com/cidverse/test-library-go-mod]":
    <<: *default_job
    stage: build
    needs: []
    dependencies: []
    timeout: 10m
    rules:
      - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "main"'
        when: always
      - when: never
    script:
        - cid --log-level=${CID_LOGLEVEL:-info} plan execute --state-file ".cid/state-gitlab.json" --state-wf-name "main" --step "go-build-github-com-cidverse-test-library-go-mod"
    artifacts:
      name: "main/go-build [github.com/cidverse/test-library-go-mod]"
      paths:
        - .dist/go-build-github-com-cidverse-test-library-go-mod/
      expire_in: 1 day
## go-test [github.com/cidverse/test-library-go-mod]
"main/go-test [github.com/cidverse/test-library-go-mod]":
    <<: *default_job
    stage: test
    needs: []
    dependencies: []
    timeout: 10m
    rules:
      - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "main"'
        when: always
      - when: never
    script:
        - cid --log-level=${CID_LOGLEVEL:-info} plan execute --state-file ".cid/state-gitlab.json" --state-wf-name "main" --step "go-test-github-com-cidverse-test-library-go-mod"
    coverage: /Test-Coverage:(\d+\.\d+)%/ # used for percentage
    artifacts:
      name: "main/go-test [github.com/cidverse/test-library-go-mod]"
      paths:
        - .dist/go-test-github-com-cidverse-test-library-go-mod/
      expire_in: 1 day
      reports:
        junit: .dist/go-test-github-com-cidverse-test-library-go-mod/report/junit/*.xml
        coverage_report: # used for visualization only
          coverage_format: cobertura
          path: .dist/go-test-github-com-cidverse-test-library-go-mod/report/cobertura/*.xml
## gitleaks-scan
"main/gitleaks-scan":
    <<: *default_job
    stage: scan
    needs: []
    dependencies: []
    timeout: 10m
    rules:
      - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "main"'
        when: always
      - when: never
    script:
        - cid --log-level=${CID_LOGLEVEL:-info} plan execute --state-file ".cid/state-gitlab.json" --state-wf-name "main" --step "gitleaks-scan"
    artifacts:
      name: "main/gitleaks-scan"
      paths:
        - .dist/gitleaks-scan/
      expire_in: 1 day
      reports:
        codequality: .dist/gitleaks-scan/report/gl-codequality/*.json
## semgrep-scan
"main/semgrep-scan":
    <<: *default_job
    stage: scan
    needs: []
    dependencies: []
    timeout: 10m
    rules:
      - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "main"'
        when: always
      - when: never
    script:
        - cid --log-level=${CID_LOGLEVEL:-info} plan execute --state-file ".cid/state-gitlab.json" --state-wf-name "main" --step "semgrep-scan"
    artifacts:
      name: "main/semgrep-scan"
      paths:
        - .dist/semgrep-scan/
      expire_in: 1 day
      reports:
        codequality: .dist/semgrep-scan/report/gl-codequality/*.json
## trivyfs-scan
"main/trivyfs-scan":
    <<: *default_job
    stage: scan
    needs: []
    dependencies: []
    timeout: 10m
    rules:
      - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "main"'
        when: always
      - when: never
    script:
        - cid --log-level=${CID_LOGLEVEL:-info} plan execute --state-file ".cid/state-gitlab.json" --state-wf-name "main" --step "trivyfs-scan"
    artifacts:
      name: "main/trivyfs-scan"
      paths:
        - .dist/trivyfs-scan/
      expire_in: 1 day
      reports:
        codequality: .dist/trivyfs-scan/report/gl-codequality/*.json
## zizmor-scan
"main/zizmor-scan":
    <<: *default_job
    stage: scan
    needs: []
    dependencies: []
    timeout: 10m
    rules:
      - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "main"'
        when: always
      - when: never
    script:
        - cid --log-level=${CID_LOGLEVEL:-info} plan execute --state-file ".cid/state-gitlab.json" --state-wf-name "main" --step "zizmor-scan"
    artifacts:
      name: "main/zizmor-scan"
      paths:
        - .dist/zizmor-scan/
      expire_in: 1 day
